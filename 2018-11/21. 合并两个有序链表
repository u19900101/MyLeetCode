
示例：

     输入：1->2->4, 1->3->4
     输出：1->1->2->3->4->4
 
思路：  创建一个新的链表，用返回值指向该链表。
当l1和l2都不为null时，比较两者的值，将值较小的首先放入链表中，链表指向当前放入的值；
当l1或l2有一个为空时，将不为空的链表与当前链表连接起来。
public ListNode mergeTwoLists(ListNode l1, ListNode l2) {

        if(l1==null&&l2==null)
            return null;

        ListNode dummy=new ListNode(0);
        ListNode res=dummy;

        while (l1!=null&&l2!=null){
            if(l1.val<l2.val){
                dummy.next=new ListNode(l1.val);
                dummy=dummy.next;
                l1=l1.next;
            }else {
                dummy.next=new ListNode(l2.val);
                dummy=dummy.next;
                l2=l2.next;
            }
         }

      if (l1!=null){
            dummy.next=l1;
        }else {
            dummy.next=l2;
        }

        return res.next;
    }
class ListNode {
    int val;
    ListNode next;
    ListNode(int val) {
        this.val = val;
    }
    ListNode() {}  
}
