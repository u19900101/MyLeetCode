题目要求：
给定一个字符串 (s) 和一个字符模式 (p)。实现支持 '.' 和 '*' 的正则表达式匹配。
'.' 匹配任意单个字符。
'*' 匹配零个或多个前面的元素。
匹配应该覆盖整个字符串 (s) ，而不是部分字符串。

说明:
s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。
示例 1:
输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。

示例 2:
输入:
s = "aa"
p = "a*"
输出: true
解释: '*' 代表可匹配零个或多个前面的元素, 即可以匹配 'a' 。因此, 重复 'a' 一次, 字符串可变为 "aa"。

示例 3:
输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个('*')任意字符('.')。

示例 4:
输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 'c' 可以不被重复, 'a' 可以被重复一次。因此可以匹配字符串 "aab"。
示例 5:

输入:
s = "mississippi"
p = "mis*is*p*."
输出: false

解题思路：
逐个取出p中的字符来检验s是否匹配
①如果当前的字符p_cuur=p.charAt(i)为“*”，则将p_cuur与s进行比较，如果相等，则s的下标+1，直至s中出现不同的字符；
②如果当前的字符p_cuur=p.charAt(i)为“.”，同时将p和s的下表+1；
③排除几种特殊情况：
A：s和p均为空，则返回true；
B：s和p中有且仅有一个为空，返回false；
C：p为“.*”则可以匹配任意不为空的字符串
D：p以“*”开头，则可以将开头的“*”去掉，将新串赋值给p
static public boolean isMatch(String s, String p) {

        if(s==""&&p=="")
            return true;
        else if(s==""||p==""){
            return false;
        }

        if(p.length()>=2&&p.charAt(0)=='.'&&p.charAt(1)=='*')
            return true;

        while (p.charAt(0)=='*'){
            p=p.substring(1);
        }
        int i=1,j=0;
        for(;i<p.length()&&j<s.length();i++){
            if(p.charAt(i)=='*'){
                if(p.charAt(i-1)==s.charAt(j)){
                    while (j<s.length()-1){
                        if(s.charAt(j)==s.charAt(j+1))
                        j++;
                        j++;
                    }
                    j++;
                }
            }else if(p.charAt(i)=='.'){
                j++;
            }else if(p.charAt(i)!=s.charAt(j)){
                return false;
            }else {
                j++;
            }
        }
        if(i==p.length()&&j<s.length()){
            return false;
        }
        return true;
    }
    
    
