给出一个链表，每 k 个节点一组进行翻转，并返回翻转后的链表。

k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么将最后剩余节点保持原有顺序。

示例 :
给定这个链表：1->2->3->4->5
当 k = 2 时，应当返回: 2->1->4->3->5
当 k = 3 时，应当返回: 3->2->1->4->5
说明 :
你的算法只能使用常数的额外空间。
你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。

思路：画张图标，依次改变链表的链接情况就行。

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
       int len=0;
        ListNode count=head;
        while (count!=null){
            len++;
            count=count.next;
        }
        if(head==null ||head.next==null||len<k)
            return head;
        ListNode res=new ListNode(-1);
        ListNode []L= new ListNode[k+1];
        L[0]=res;
        L[0].next=head;

        for(int m=1;m<k+1;m++){
            L[m]=head;
            if(head.next!=null)
                head=head.next;
        }
        int i=k+1;
        while (i==k+1){
            i=0;
            while(L[i]!=null){
                i++;
                if(i==k+1)
                    break;
            }

            if(i!=k+1)
                return res.next;
                
            if(L[0].next!=null){
                L[0].next=L[k];
                L[1].next=L[k].next;
                int j=2;
                while (j<=k){
                    L[j].next=L[j-1];
                    j++;
                }

                //将L重新赋值
                L[0]=L[1];
                ListNode headtemp=L[0].next;
                for(int m=1;m<k+1;m++){
                    L[m]=headtemp;
                    if(headtemp!=null){
                        headtemp=headtemp.next;
                    }else {
                        return res.next;
                    }

                }
            }else {
                return res.next;
            }
        }
        return res.next;
    }
}


solution 2：public ListNode reverseKGroup(ListNode head, int k) {
        ListNode prev = null;
        ListNode cur = head;
        ListNode next = null;
        ListNode check = head;
        int canProceed = 0;
        int count = 0;
        // 检查链表长度是否满足翻转
        while (canProceed < k && check != null) {
            check = check.next;
            canProceed++;
        }
        // 满足条件，进行翻转
        if (canProceed == k) {
            while (count < k && cur != null) {
                next = cur.next;
                cur.next = prev;
                prev = cur;
                cur = next;
                count++;
            }
            if (next != null) {
                // head 为链表翻转后的尾节点
                head.next = reverseKGroup(next, k);
            }
            // prev 为链表翻转后的头结点
            return prev;
        } else {
            // 不满住翻转条件，直接返回 head 即可
            return head;
        }
    }
